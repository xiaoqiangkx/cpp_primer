==和!=是从用户的角度考虑的, 用户认为==或者!=存在, 另一个操作往往也存在.

而<和>操作用户是无法看到的, 他们只关心输入连个数后能够输出大小. 我们只使用"<", 可以减少对类型的过多要求. 那么如果类型不支持这个操作时, 系统会编译时报错, 而不会运行时再出错, 保证了安全.
